// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`getRollupMarkdownFields > should extract markdown fields for abstract (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "1 hour",
  "gasLimit": "2^50",
  "messaging": {
    "l1ToL2": {
      "cost": "No added cost",
      "latency": "~15 minutes",
    },
    "l2ToL1": {
      "cost": "10 000 L1 gas",
      "latency": "1 hours",
    },
  },
  "sequencingFrequency": "15 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns the expected base fee for blobs in the next block.",
      "method": "eth_blobBaseFee",
      "params": "None",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates an EIP-2930 access list that you can include in a transaction.",
      "method": "eth_createAccessList",
      "params": "Transaction object array",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns the account and storage values of the specified account including the Merkle-proof. <br /><br />**Note**<br />See \`zks_getProof\` as an alternative.",
      "method": "eth_getProof",
      "params": "Address (to fetch storage values and proofs for), array of data (the keys in the account), integer (block number)",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns a fee per gas that is an estimate of how much you can pay as a priority fee, or 'tip', to get a transaction included in the current block.",
      "method": "eth_maxPriorityFeePerGas",
      "params": "None",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates new message call transaction or a contract creation, if the data field contains code, and signs it using the account specified in from.",
      "method": "eth_sendTransaction",
      "params": "Transaction object",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Signs a transaction that can be submitted to the network later using \`eth_sendRawTransaction\`.",
      "method": "eth_signTransaction",
      "params": "Transaction object array",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given block.",
      "method": "eth_getBlockByNumber",
      "params": "Hex-encoded integer",
      "rollupBehaviour": "Returns information for a given block. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given block.",
      "method": "eth_getBlockByHash",
      "params": "Hash",
      "rollupBehaviour": "Returns information for a given block. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionByHash",
      "params": "Hash",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionByBlockHashAndIndex",
      "params": "Hash and hex-encoded integer",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionByBlockNumberAndIndex",
      "params": "Two hex-encoded integers",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "Hash",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number, l1 timestamp, l1 batch TX index and L2toL1 logs.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_estimateFee",
      "params": "Transaction request object",
      "rollupBehaviour": "Returns the estimated fee for the transaction with added information for L1 calldata fee.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_estimateGasL1ToL2",
      "params": "Call request object",
      "rollupBehaviour": "Returns an estimate of the gas required for sending a L1 to L2 transaction",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getAllAccountBalances",
      "params": "Hex encoded address",
      "rollupBehaviour": "Returns all balances for confirmed tokens given by an account address",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBaseTokenL1Address",
      "params": "None",
      "rollupBehaviour": "Returns the L1 base token address",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBlockDetails",
      "params": "Integer",
      "rollupBehaviour": "Returns additional ZKsync-specific information about the L2 block, like commit, prove, and execution transactions",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBridgeContracts",
      "params": "None",
      "rollupBehaviour": "Returns L1/L2 addresses of the canonical bridge contracts",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBridgeHubContract",
      "params": "None",
      "rollupBehaviour": "Returns the BridgeHub contract address",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBytecodeByHash",
      "params": "Hash",
      "rollupBehaviour": "Returns bytecode for a given hash stored in the KnownHashes registry",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getConfirmedTokens",
      "params": "Integer (the id from which to start returning information about tokens) and integer (number of tokens to be returned)",
      "rollupBehaviour": "Returns [address, symbol, name, and decimal] information of all tokens within a range of ids given by parameters from and limit.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL1BatchBlockRange",
      "params": "Integer",
      "rollupBehaviour": "Returns the range of blocks contained within a batch given a batch number",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL1BatchDetails",
      "params": "Integer",
      "rollupBehaviour": "Returns information for a given L1 batch",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL1GasPrice",
      "params": "None",
      "rollupBehaviour": "Returns current L1 gas price in hexadecimal format, representing the amount of wei per unit of gas",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getFeeParams",
      "params": "None",
      "rollupBehaviour": "Returns the current L2 fee model parameters",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getProtocolVersion",
      "params": "None",
      "rollupBehaviour": "Returns protocol version information",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getProof",
      "params": "Address (to fetch storage values and proofs for), array of data (the keys in the account), integer (number of the L1 batch)",
      "rollupBehaviour": "Returns an object containing the account details and proofs for storage keys",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL2ToL1LogProof",
      "params": "Bytes32 (hash of the L2 transaction) and integer (index of the l2 to l1 log in the transaction - optional)",
      "rollupBehaviour": "Given a transaction hash and an index of the L2 to L1 log produced within the transaction, it returns the proof for the corresponding L2 to L1 log.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL2ToL1MsgProof",
      "params": "Integer (number of a block), address (sender of a message), bytes32 (keccak256 hash of the message) and integer (index in the block of the event that was emitted)",
      "rollupBehaviour": "Given a block, a sender, a message, and an optional message log index in the block containing the L1->L2 message, it returns the proof for the message sent via the L1Messenger system contract.<br /><br />**Note**<br />The endpoint will be deprecated in favour of \`zks_getL2ToL1LogProof\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getMainContract",
      "params": "None",
      "rollupBehaviour": "Returns the address of the Abstract contract",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getRawBlockTransactions",
      "params": "Integer",
      "rollupBehaviour": "Returns raw data of transactions in a block",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getTestnetPaymaster",
      "params": "None",
      "rollupBehaviour": "Returns the address of the testnet paymaster (available on testnet only, allows paying fees with any ERC-20 token)",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getTransactionDetails",
      "params": "Hash",
      "rollupBehaviour": "Returns additional ZKsync-specific data from a specific transaction given by the transaction hash.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_L1BatchNumber",
      "params": "None",
      "rollupBehaviour": "Returns the latest L1 batch number",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_L1ChainId",
      "params": "None",
      "rollupBehaviour": "Returns the chain id of the underlying L1",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions.
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions.
- **Type 113** - User Transactions. Represent custom [EIP-712](https://docs.zksync.io/zksync-protocol/rollup/transaction-lifecycle#eip-712-0x71) transactions that enable Account Abstraction on the protocol level.",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for arbitrum-one (snapshot) 1`] = `
{
  "blockTime": "250ms",
  "finality": "7 days",
  "gasLimit": "32 million",
  "messaging": {
    "l1ToL2": {
      "cost": "No added cost",
      "latency": "~6-9 minutes",
    },
    "l2ToL1": {
      "cost": "60 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "30 - 120 seconds",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns object with sync status data or \`FALSE\`, when not syncing.",
      "method": "eth_syncing",
      "params": "None",
      "rollupBehaviour": "Returns object with sync status data or \`FALSE\`, when not syncing. The object contains rollup specific information on the sync state of the node such as the last seen or processed batch as-well as L1 state information and messages processed. <br /><br /> Specific list of the differences [here](https://docs.arbitrum.io/arbitrum-ethereum-differences#eth_syncing-rpc-method).",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given block.",
      "method": "eth_getBlockByHash",
      "params": "Hash of a block",
      "rollupBehaviour": "Returns information for a given block.<br /><br />Adds additional information such as l1 block number, send count and send root.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given block.",
      "method": "eth_getBlockByNumber",
      "params": "Integer of a block number, or the string "earliest", "latest" or "pending”",
      "rollupBehaviour": "Returns information for a given block.<br /><br />Adds additional information such as l1 block number, send count and send root.",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transaction. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transaction. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 2** - User Transaction. [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 100** - System (Bridge) Transaction. A deposit of ETH from L1 to L2 via the Arbitrum bridge
- **Type 101** - System (Bridge) Transaction. An L1 user can use to call an L2 contract via the bridge
- **Type 102** - System (Bridge) Transaction. An L1 contract can use to call an L2 contract via the bridge
- **Type 104** - User Transaction. Used to redeem a retryable ticket on L2, which finalizes a retryable that failed to execute automatically (usually due to low gas)
- **Type 105** - System (Bridge) Transaction. Retryable tickets are submitted via the L1 bridge and allow arbitrary L1 to L2 messages to be created and executed on L2
- **Type 106** - System (Internal) Transaction. Transactions created by the ArbOS itself for certain state updates, like L1 base fee and block number",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for base (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "7 days",
  "gasLimit": "120 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~500 000 L1 gas",
      "latency": "~1 minute",
    },
    "l2ToL1": {
      "cost": "~550 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "~1 minute",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_outputAtBlock",
      "params": "Integer block number or string one of \`safe\`, \`latest\` or \`pending\`",
      "rollupBehaviour": "Returns the requested \`l2OutputRoot\` containing \`version\` and \`l2OutputRoot\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_syncStatus",
      "params": "None",
      "rollupBehaviour": "Returns information on node’s current, head, safe and finalised L1 state, as well as unsafe, safe and finalized L2 state",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into Base](https://github.com/ethereum-optimism/optimism/blob/develop/specs/deposits.md#l1-attributes-deposited-transaction) or [User-deposited transactions](https://github.com/ethereum-optimism/optimism/blob/develop/specs/deposits.md#user-deposited-transactions)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for blast (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "7 days",
  "gasLimit": "30 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~500 000 L1 gas",
      "latency": "~1 minute",
    },
    "l2ToL1": {
      "cost": "~550 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "~20 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_outputAtBlock",
      "params": "Integer block number or string one of \`safe\`, \`latest\` or \`pending\`",
      "rollupBehaviour": "Returns the requested \`l2OutputRoot\` containing \`version\` and \`l2OutputRoot\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_syncStatus",
      "params": "None",
      "rollupBehaviour": "Returns information on node’s current, head, safe and finalised L1 state, as well as unsafe, safe and finalized L2 state",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into Blast](https://docs.optimism.io/connect/resources/glossary#l1-attributes-deposited-transaction) or [User-deposited transactions](https://docs.optimism.io/connect/resources/glossary#user-deposited-transaction)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for ink (snapshot) 1`] = `
{
  "blockTime": "1 second",
  "finality": "7 days",
  "gasLimit": "30 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~500 000 L1 gas",
      "latency": "~1 minute",
    },
    "l2ToL1": {
      "cost": "~550 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "10-60 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_outputAtBlock",
      "params": "Integer block number or string one of \`safe\`, \`latest\` or \`pending\`",
      "rollupBehaviour": "Returns the requested \`l2OutputRoot\` containing \`version\` and \`l2OutputRoot\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_syncStatus",
      "params": "None",
      "rollupBehaviour": "Returns information on node’s current, head, safe and finalised L1 state, as well as unsafe, safe and finalized L2 state",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into Ink](https://docs.optimism.io/connect/resources/glossary#l1-attributes-deposited-transaction) or [User-deposited transactions](https://docs.optimism.io/connect/resources/glossary#user-deposited-transaction)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for kakarot (snapshot) 1`] = `
{
  "blockTime": "On demand*",
  "finality": "At the moment the rollup uses a mock prover that accepts every block as finalized once it is sequenced",
  "gasLimit": "7 million",
  "messaging": {
    "l1ToL2": {
      "cost": null,
      "latency": null,
    },
    "l2ToL1": {
      "cost": null,
      "latency": null,
    },
  },
  "sequencingFrequency": "~1-7 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Polling method for a filter, which returns an array of events that have occurred since the last poll.",
      "method": "eth_getFilterChanges",
      "params": "Filter ID",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns an array of all logs matching filter with given id.",
      "method": "eth_getFilterLogs",
      "params": "Filter ID",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates a filter in the node, to notify when a new block arrives.",
      "method": "eth_newBlockFilter",
      "params": "None",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates a filter object, based on filter options, to notify when the state changes (logs).",
      "method": "eth_newFilter",
      "params": "Filter object",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates a filter object in the node, to notify when a new transaction arrives.",
      "method": "eth_newPendingTransactionFilter",
      "params": "None",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Uninstalls a filter with the given filter id.",
      "method": "eth_uninstallFilter",
      "params": "Filter ID",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns the collection of historical gas information.",
      "method": "eth_feeHistory",
      "params": "\`blockCount\`, \`newestBlock\` and \`rewardPercentiles\` array",
      "rollupBehaviour": "Since Kakarot has no fee market, this will return the base fee over a range of blocks.",
    },
    {
      "ethereumL1Behaviour": "Get the priority fee needed to be included in a block.",
      "method": "eth_maxPriorityFeePerGas",
      "params": "None",
      "rollupBehaviour": "Response is always 0",
    },
    {
      "ethereumL1Behaviour": "Returns information about a uncle of a block by hash and uncle index position.",
      "method": "eth_getUncleByBlockHashAndIndex",
      "params": "Block hash and integer index",
      "rollupBehaviour": "Response is always 0",
    },
    {
      "ethereumL1Behaviour": "Returns information about a uncle of a block by number and uncle index position.",
      "method": "eth_getUncleByBlockNumberAndIndex",
      "params": "Block number (integer) and integer index",
      "rollupBehaviour": "Response is always 0",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transaction. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for linea (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "8 - 32 hours",
  "gasLimit": "61 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~66 000 L1 gas + ~71 000 L2 gas (in case of manual delivery)",
      "latency": "~17min",
    },
    "l2ToL1": {
      "cost": "~73 000 L2 gas",
      "latency": "8 to 32 hours",
    },
  },
  "sequencingFrequency": "30 - 120 seconds",
  "supportedRpcCalls": [],
  "supportedTransactionTypes": "- **Type 0** - User Transaction. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transaction. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 2** - User Transaction. [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for optimism (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "7 days",
  "gasLimit": "60 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~500 000 L1 gas",
      "latency": "~1 minute",
    },
    "l2ToL1": {
      "cost": "~550 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "~6 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_outputAtBlock",
      "params": "Integer block number or string one of \`safe\`, \`latest\` or \`pending\`",
      "rollupBehaviour": "Returns the requested \`l2OutputRoot\` containing \`version\` and \`l2OutputRoot\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_syncStatus",
      "params": "None",
      "rollupBehaviour": "Returns information on node’s current, head, safe and finalised L1 state, as well as unsafe, safe and finalized L2 state",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into Optimism](https://docs.optimism.io/connect/resources/glossary#l1-attributes-deposited-transaction) or [User-deposited transactions](https://docs.optimism.io/connect/resources/glossary#user-deposited-transaction)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for polygon-zkevm (snapshot) 1`] = `
{
  "blockTime": "Irregular*",
  "finality": "~1 hour",
  "gasLimit": "30 million",
  "messaging": {
    "l1ToL2": {
      "cost": "95000 L2 gas",
      "latency": "~6-8 minutes",
    },
    "l2ToL1": {
      "cost": " 95000 L1 gas",
      "latency": "~1 hour",
    },
  },
  "sequencingFrequency": "~4-8 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "N/A",
      "method": "debug_traceBatchByNumber",
      "params": "Batch number",
      "rollupBehaviour": "Gets traces at once for all the transactions attached to the same batch.",
    },
    {
      "ethereumL1Behaviour": "Executes a new message call immediately without creating a transaction on the blockchain",
      "method": "eth_call",
      "params": "The transaction call object and integer block number (or the string \`latest\`, \`earliest\` or \`pending\`)",
      "rollupBehaviour": "Executes a new message call immediately without creating a transaction on the blockchain.<br /><br />Does not support state override and pending block.<br /><br />Does not support \`from\` values that are smart contract addresses.",
    },
    {
      "ethereumL1Behaviour": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",
      "method": "eth_estimateGas",
      "params": "The transaction call object and integer block number (or the string \`latest\`, \`earliest\` or \`pending\`)",
      "rollupBehaviour": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.<br /><br />If the block number is set to \`pending\` it is replaced and computed with \`latest\`",
    },
    {
      "ethereumL1Behaviour": "Returns the balance of the account of the given address.",
      "method": "eth_getBalance",
      "params": "Address and integer block number (or the string \`latest\`, \`earliest\` or \`pending\`)",
      "rollupBehaviour": "Returns the balance of the account of the given address.<br /><br />If the block number is set to \`pending\` it is replaced and computed with \`latest\`",
    },
    {
      "ethereumL1Behaviour": "Returns code at a given address.",
      "method": "eth_getCode",
      "params": "Address and integer block number (or the string \`latest\`, \`earliest\` or \`pending\`)",
      "rollupBehaviour": "Returns code at a given address.<br /><br />If the block number is set to \`pending\` it is replaced and computed with \`latest\`",
    },
    {
      "ethereumL1Behaviour": "Returns information about a uncle of a block by hash and uncle index position.",
      "method": "eth_getUncleByBlockHashAndIndex",
      "params": "Block hash and integer index",
      "rollupBehaviour": "Response is always empty",
    },
    {
      "ethereumL1Behaviour": "Returns information about a uncle of a block by number and uncle index position.",
      "method": "eth_getUncleByBlockNumberAndIndex",
      "params": "Block number (integer) and integer index",
      "rollupBehaviour": "Response is always empty",
    },
    {
      "ethereumL1Behaviour": "Returns the number of uncles in a block from a block matching the given block hash.",
      "method": "eth_getUncleCountByBlockHash",
      "params": "Block hash",
      "rollupBehaviour": "Response is always zero.",
    },
    {
      "ethereumL1Behaviour": "Returns the number of uncles in a block from a block matching the given block number.",
      "method": "eth_getUncleCountByBlockNumber",
      "params": "Block number",
      "rollupBehaviour": "Response is always zero.",
    },
    {
      "ethereumL1Behaviour": "Returns the current Ethereum protocol version.",
      "method": "eth_protocolVersion",
      "params": "None",
      "rollupBehaviour": "Response is always zero.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "txpool_content",
      "params": "None",
      "rollupBehaviour": "Response is always empty",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_batchNumber",
      "params": "None",
      "rollupBehaviour": "Returns the latest batch number",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_batchNumberByBlockNumber",
      "params": "Block number",
      "rollupBehaviour": "Returns the batch number of the batch connected to the block.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_consolidatedBlockNumber",
      "params": "None",
      "rollupBehaviour": "Returns the latest block number that is connected to the latest batch verified.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_estimateCounters",
      "params": "Transaction parameters",
      "rollupBehaviour": "Returns the estimate use of ZK counters for a given transaction.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_estimateFee",
      "params": "Transaction parameters",
      "rollupBehaviour": "Returns the estimate fee for a tx, this endpoint will take into account the effective gas price (if enabled) in the calculation of the fee.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_estimateGasPrice",
      "params": "Transaction parameters",
      "rollupBehaviour": "Returns the estimate gas price for a given transaction.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_getBatchByNumber",
      "params": "Hex batch number or a tag (\`earliest\` / \`latest\`)",
      "rollupBehaviour": "Gets a batch for a given number",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_getNativeBlockHashesInRange",
      "params": "Filter with \`fromBlock\` and \`toBlock\` numbers",
      "rollupBehaviour": "Returns the list of native block hashes (a.k.a state root)",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_isBlockConsolidated",
      "params": "Hex string block number",
      "rollupBehaviour": "Returns \`true\` if the provided block number is already connected to a batch that was already verified, otherwise false.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_isBlockVirtualized",
      "params": "Hex string block number",
      "rollupBehaviour": "Returns \`true\` if the provided block number is already connected to a batch that was already virtualized, otherwise false.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_verifiedBatchNumber",
      "params": "Hex batch number",
      "rollupBehaviour": "Returns the latest verified batch number.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zkevm_virtualBatchNumber",
      "params": "Hex batch number",
      "rollupBehaviour": "Returns the latest virtual batch number.",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- No support for  [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718), [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) and [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) type transactions.",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for scroll (snapshot) 1`] = `
{
  "blockTime": "Irregular* with a target of 3 seconds",
  "finality": "< 30 minutes",
  "gasLimit": "10 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~139 000 L1 gas",
      "latency": "8 to 14 minutes",
    },
    "l2ToL1": {
      "cost": "~220 000 L2 gas + ~123 000 L1 gas",
      "latency": "~30 minutes",
    },
  },
  "sequencingFrequency": "2 - 45 minutes",
  "supportedRpcCalls": [],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 4** - User Transactions. Represent [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) transactions
- **Type 126** - System transactions. Represent custom [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transaction called \`L1MessageTx\` Transaction. This type of transaction is used for messaging and bridging from L1 to L2.",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for soneium (snapshot) 1`] = `
{
  "blockTime": "2 second",
  "finality": "7 days",
  "gasLimit": "40 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~500 000 L1 gas",
      "latency": "~1 minute",
    },
    "l2ToL1": {
      "cost": "~550 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "15-20 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_outputAtBlock",
      "params": "Integer block number or string one of \`safe\`, \`latest\` or \`pending\`",
      "rollupBehaviour": "Returns the requested \`l2OutputRoot\` containing \`version\` and \`l2OutputRoot\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_syncStatus",
      "params": "None",
      "rollupBehaviour": "Returns information on node’s current, head, safe and finalised L1 state, as well as unsafe, safe and finalized L2 state",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into Soneium](https://docs.optimism.io/connect/resources/glossary#l1-attributes-deposited-transaction) or [User-deposited transactions](https://docs.optimism.io/connect/resources/glossary#user-deposited-transaction)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for taiko (snapshot) 1`] = `
{
  "blockTime": "On demand*",
  "finality": "1 day",
  "gasLimit": "240 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~110 000 L1 gas + ~440 000 L2 gas (in case of manual delivery)",
      "latency": "~3 minutes",
    },
    "l2ToL1": {
      "cost": "~129 000 L2 gas + ~440 000 L1 gas (in case of manual delivery)",
      "latency": "~4 minutes",
    },
  },
  "sequencingFrequency": "12 - 60 seconds",
  "supportedRpcCalls": [],
  "supportedTransactionTypes": "- **Type 0** - User Transaction. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transaction. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 2** - User Transaction. [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for world-chain (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "7 days",
  "gasLimit": "30 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~500 000 L1 gas",
      "latency": "~1 minute",
    },
    "l2ToL1": {
      "cost": "~550 000 L1 gas",
      "latency": "7 days",
    },
  },
  "sequencingFrequency": "~1-2 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_outputAtBlock",
      "params": "Integer block number or string one of \`safe\`, \`latest\` or \`pending\`",
      "rollupBehaviour": "Returns the requested \`l2OutputRoot\` containing \`version\` and \`l2OutputRoot\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "optimism_syncStatus",
      "params": "None",
      "rollupBehaviour": "Returns information on node’s current, head, safe and finalised L1 state, as well as unsafe, safe and finalized L2 state",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into World Chain](https://docs.optimism.io/connect/resources/glossary#l1-attributes-deposited-transaction) or [User-deposited transactions](https://docs.optimism.io/connect/resources/glossary#user-deposited-transaction)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for zircuit (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "2-5 hours",
  "gasLimit": "10 million",
  "messaging": {
    "l1ToL2": {
      "cost": "~340 000 L1 gas",
      "latency": "~5 seconds",
    },
    "l2ToL1": {
      "cost": "~260 000 L1 gas",
      "latency": "5-8 hours",
    },
  },
  "sequencingFrequency": "~15 minutes",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns the account and storage values of the specified account including the Merkle-proof.",
      "method": "eth_getProof",
      "params": "\`address\`, \`storageKeys\`",
      "rollupBehaviour": "Returns the account and storage values of the specified account including the Merkle-proof. <br /><br />Adds а \`poseidonCodeHash\`.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "\`hash\`",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "hash",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information related to L1 calldata fees.",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions
- **Type 1** - User Transactions. Represent legacy transactions post [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions
- **Type 126** - System Transactions. They can be transactions [importing L1 data into Zircuit](https://docs.optimism.io/connect/resources/glossary#l1-attributes-deposited-transaction) or [User-deposited transactions](https://docs.optimism.io/connect/resources/glossary#user-deposited-transaction)",
}
`;

exports[`getRollupMarkdownFields > should extract markdown fields for zksync-era (snapshot) 1`] = `
{
  "blockTime": "2 seconds",
  "finality": "3 hours",
  "gasLimit": "2^50",
  "messaging": {
    "l1ToL2": {
      "cost": "No added cost",
      "latency": "~15 minutes",
    },
    "l2ToL1": {
      "cost": "10 000 L1 gas",
      "latency": "3 hours (enforced by protocol's execution delay)",
    },
  },
  "sequencingFrequency": "1 hour",
  "supportedRpcCalls": [
    {
      "ethereumL1Behaviour": "Returns the expected base fee for blobs in the next block.",
      "method": "eth_blobBaseFee",
      "params": "None",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates an EIP-2930 access list that you can include in a transaction.",
      "method": "eth_createAccessList",
      "params": "Transaction object array",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns the account and storage values of the specified account including the Merkle-proof. <br /><br />**Note**<br />See \`zks_getProof\` as an alternative.",
      "method": "eth_getProof",
      "params": "Address (to fetch storage values and proofs for), array of data (the keys in the account), integer (block number)",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns a fee per gas that is an estimate of how much you can pay as a priority fee, or 'tip', to get a transaction included in the current block.",
      "method": "eth_maxPriorityFeePerGas",
      "params": "None",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Creates new message call transaction or a contract creation, if the data field contains code, and signs it using the account specified in from.",
      "method": "eth_sendTransaction",
      "params": "Transaction object",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Signs a transaction that can be submitted to the network later using \`eth_sendRawTransaction\`.",
      "method": "eth_signTransaction",
      "params": "Transaction object array",
      "rollupBehaviour": "Not supported",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given block.",
      "method": "eth_getBlockByNumber",
      "params": "Hex-encoded integer",
      "rollupBehaviour": "Returns information for a given block. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given block.",
      "method": "eth_getBlockByHash",
      "params": "Hash",
      "rollupBehaviour": "Returns information for a given block. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionByHash",
      "params": "Hash",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionByBlockHashAndIndex",
      "params": "Hash and hex-encoded integer",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionByBlockNumberAndIndex",
      "params": "Two hex-encoded integers",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number and timestamp.",
    },
    {
      "ethereumL1Behaviour": "Returns information for a given transaction.",
      "method": "eth_getTransactionReceipt",
      "params": "Hash",
      "rollupBehaviour": "Returns information for a given transaction. <br /><br />Adds additional information such as l1 batch number, l1 timestamp, l1 batch TX index and L2toL1 logs.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_estimateFee",
      "params": "Transaction request object",
      "rollupBehaviour": "Returns the estimated fee for the transaction with added information for L1 calldata fee.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_estimateGasL1ToL2",
      "params": "Call request object",
      "rollupBehaviour": "Returns an estimate of the gas required for sending a L1 to L2 transaction",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getAllAccountBalances",
      "params": "Hex encoded address",
      "rollupBehaviour": "Returns all balances for confirmed tokens given by an account address",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBaseTokenL1Address",
      "params": "None",
      "rollupBehaviour": "Returns the L1 base token address",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBlockDetails",
      "params": "Integer",
      "rollupBehaviour": "Returns additional ZKsync-specific information about the L2 block, like commit, prove, and execution transactions",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBridgeContracts",
      "params": "None",
      "rollupBehaviour": "Returns L1/L2 addresses of the canonical bridge contracts",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBridgeHubContract",
      "params": "None",
      "rollupBehaviour": "Returns the BridgeHub contract address",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getBytecodeByHash",
      "params": "Hash",
      "rollupBehaviour": "Returns bytecode for a given hash stored in the KnownHashes registry",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getConfirmedTokens",
      "params": "Integer (the id from which to start returning information about tokens) and integer (number of tokens to be returned)",
      "rollupBehaviour": "Returns [address, symbol, name, and decimal] information of all tokens within a range of ids given by parameters from and limit.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL1BatchBlockRange",
      "params": "Integer",
      "rollupBehaviour": "Returns the range of blocks contained within a batch given a batch number",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL1BatchDetails",
      "params": "Integer",
      "rollupBehaviour": "Returns information for a given L1 batch",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL1GasPrice",
      "params": "None",
      "rollupBehaviour": "Returns current L1 gas price in hexadecimal format, representing the amount of wei per unit of gas",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getFeeParams",
      "params": "None",
      "rollupBehaviour": "Returns the current L2 fee model parameters",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getProtocolVersion",
      "params": "None",
      "rollupBehaviour": "Returns protocol version information",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getProof",
      "params": "Address (to fetch storage values and proofs for), array of data (the keys in the account), integer (number of the L1 batch)",
      "rollupBehaviour": "Returns an object containing the account details and proofs for storage keys",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL2ToL1LogProof",
      "params": "Bytes32 (hash of the L2 transaction) and integer (index of the l2 to l1 log in the transaction - optional)",
      "rollupBehaviour": "Given a transaction hash and an index of the L2 to L1 log produced within the transaction, it returns the proof for the corresponding L2 to L1 log.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getL2ToL1MsgProof",
      "params": "Integer (number of a block), address (sender of a message), bytes32 (keccak256 hash of the message) and integer (index in the block of the event that was emitted)",
      "rollupBehaviour": "Given a block, a sender, a message, and an optional message log index in the block containing the L1->L2 message, it returns the proof for the message sent via the L1Messenger system contract.<br /><br />**Note**<br />The endpoint will be deprecated in favour of \`zks_getL2ToL1LogProof\`",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getMainContract",
      "params": "None",
      "rollupBehaviour": "Returns the address of the ZKsync Era contract",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getRawBlockTransactions",
      "params": "Integer",
      "rollupBehaviour": "Returns raw data of transactions in a block",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getTestnetPaymaster",
      "params": "None",
      "rollupBehaviour": "Returns the address of the testnet paymaster (available on testnet only, allows paying fees with any ERC-20 token)",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_getTransactionDetails",
      "params": "Hash",
      "rollupBehaviour": "Returns additional ZKsync-specific data from a specific transaction given by the transaction hash.",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_L1BatchNumber",
      "params": "None",
      "rollupBehaviour": "Returns the latest L1 batch number",
    },
    {
      "ethereumL1Behaviour": "N/A",
      "method": "zks_L1ChainId",
      "params": "None",
      "rollupBehaviour": "Returns the chain id of the underlying L1",
    },
  ],
  "supportedTransactionTypes": "- **Type 0** - User Transactions. Represent [pre-EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) transactions.
- **Type 2** - User Transactions. Represent [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) transactions.
- **Type 113** - User Transactions. Represent custom [EIP-712](https://docs.zksync.io/zksync-protocol/rollup/transaction-lifecycle#eip-712-0x71) transactions that enable Account Abstraction on the protocol level.",
}
`;
